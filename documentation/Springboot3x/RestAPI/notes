jdbc - write sql. more code
spring jdbc - also write sql. less code

Dependencies

Spring WEb
Spring Data JPA
H2 Database
Dev tools

â€¢ Users REST API
Retrieve all Users  - GET /


Create a User  - POST /users
Retrieve one User - GET /users/{id} -> /users/1
Delete a User - DELETE/users/{id} -> /users/1
Posts REST API
Retrieve all posts for a User GET /users/{id}/posts
Create a post for a User POST/users/{id}/posts
Retrieve details of a post GET /users/{id}/posts/[post_id}


/users
/users/1
/users/1/posts
/users/1/posts/2

talend api tester chrome extensions

rest api documentation - swagger & openapi

2011 - swagger specification was created
2016 - openAPI specification was creaded based on swagger specification. but swaggertools continue to exist.

swaggerUI : Visualize and interact with our REST API

springdoc-openapi java library helps to automate the generation of API documentation for spring boot projects. 

springdoc.org (supports springboot version 1, 2)
Google springdoc openapi
https://github.com/springdoc/springdoc-openapi (supports springboot version 3)

Go to 2.x version(supports springboot version 3) from master branch(supports springboot version 1, 2)

https://github.com/springdoc/springdoc-openapi/tree/2.x/springdoc-openapi-starter-webmvc-ui
https://github.com/springdoc/springdoc-openapi/blob/2.x/springdoc-openapi-starter-webmvc-ui/pom.xml

copy from pom.xml to our project
<parent><groupId>org.springdoc</groupId>
<version>2.0.3-SNAPSHOT</version>
<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>

localhost:8080/swagger-ui/index.html
localhost:8080/v3/api-docs
<dependency> 
				<groupId>org.springdoc</groupId> 
				<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId> 
				<version>2.0.0</version>
			</dependency> 

https://soshace.com/hunting-down-and-fixing-memory-leaks-in-java/

content negotitaion

Accept header
Accept-langugage header

		<dependency> 
				<groupId>com.fasterxml.jackson.dataformat</groupId> 
				<artifactId>jackson-dataformat-xml</artifactId>
			</dependency>

            client request the url (Talend API) with header
            Accept : application/xml

Internationalization - i18n

    Get locale from request header(Locale locale = LocaleContextHolder.getLocale()) otherwise it returns system defined locale

    Customized messages for dutch add the following

    messages_nl.properties

----------------------
URLs
URI Versioning

V1: http://localhost:8080/v1/person

@GetMapping("/v1/person")

V2: http://localhost:8080/v2/person

@GetMapping("/v2/person")

Request Param Versioning

V1: http://localhost:8080/person?version=1

@GetMapping(path = "/person", params = "version=1")

V2: http://localhost:8080/person?version=2

@GetMapping(path = "/person", params = "version=2")

Header Versioning

V1: http://localhost:8080/person/header

HEADER - X-API-VERSION:1

@GetMapping(path = "/person/header", headers = "X-API-VERSION=1")

V2: http://localhost:8080/person/header

HEADER - X-API-VERSION:2

@GetMapping(path = "/person/header", headers = "X-API-VERSION=2")

Content Negotiation Versioning

V1: http://localhost:8080/person/accept

HEADER - Accept:application/vnd.company.app-v1+json

@GetMapping(path = "/person/accept", produces = "application/vnd.company.app-v1+json")

V2: http://localhost:8080/person/accept

HEADER - Accept:application/vnd.company.app-v1+json

@GetMapping(path = "/person/accept", produces = "application/vnd.company.app-v2+json")

V1 Response

{
  "name": "Bob Charlie"
}
V2 Response

{
  "name": {
    "firstName": "Bob",
    "lastName": "Charlie"
  }
}

--------------

- Basic Resources
  - http://localhost:8080/hello-world
  - http://localhost:8080/hello-world-bean
  - http://localhost:8080/hello-world/path-variable/AB
  - http://localhost:8080/users
  - http://localhost:8080/users/1
- JPA Resources
  - http://localhost:8080/jpa/users
  - http://localhost:8080/jpa/users/1
  - http://localhost:8080/jpa/users/10001/posts
- Filtering
  - http://localhost:8080/filtering
  - http://localhost:8080/filtering-list
- Actuator
  - http://localhost:8080/actuator
- Versioning
  - http://localhost:8080/v1/person
  - http://localhost:8080/v2/person
  - http://localhost:8080/person
     - params=[version=1]
  - http://localhost:8080/person
     - params=[version=2]
  - http://localhost:8080/person/header
     - headers=[X-API-VERSION=1]
  - http://localhost:8080/person/header
     - headers=[X-API-VERSION=2]
  - http://localhost:8080/person/accept
     - produces=[application/vnd.company.app-v1+json]
  - http://localhost:8080/person/accept
  	 - produces=[application/vnd.company.app-v2+json]
- Swagger
  - http://localhost:8080/swagger-ui.html
  - http://localhost:8080/v3/api-docs
- H2-Console
  - http://localhost:8080/h2-console
- HAL Browser
	- http://localhost:8080

    ---------------------
Hateoas

- tells how to perform additional info apart from getting data

implementations
1. custom
2. standard(HAL)



		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-hateoas</artifactId>
		</dependency>


        wra user in entiymodel

    -------------------

Filtering

Serilization - Converting object to stream(JSON)

Customiation- JSONProperty

	//@JsonProperty("user_name")
	private String name;


filtering - return only selected fields
Static filtering - same filtering
dynamic filering - custom filtering

	//@JsonIgnore
	private String field3;

    //@JsonIgnoreProperties({"field1","field2"})
    public class SomeBean {

        dynamic filtering - @JsonFilter("SomeBeanFilter")

        -----------------

        ACtuator - Monitor our applications

        		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

        http://localhost:8080/acutator - health of an applcation
management.endpoints.web.exposure.include=*
http://localhost:8080/acutator/beans
http://localhost:8080/acutator/env
http://localhost:8080/acutator/metrics/http.server.requests
http://localhost:8080/acutator/mappings

--------------------

Explore API usig HAL explorer (API explorer)

		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-rest-hal-explorer</artifactId>
		</dependency>

localhost:8080/explorer

put 
localhost:8080/actuator
localhost:8080/users

--------------