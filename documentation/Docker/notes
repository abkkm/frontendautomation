Hardware - OS - JVM - App - Helloworld.java

App + App server - MyApp.war - App

JVM - OS - Window

Dev team, Testing team, DEploy them on CI/CD

Using docker, we can containerize our app & its dependencies ( App + App server + JVM)

DB can be dockerized separetly

HW - Host OS - Guest OS - App
HW - Host OS - Docker - App

1. Install a docker
2. Build a docker image [In order to create a docket image we need docker file]
3. Run docker container(running instance of a image) from a docker image

Note docker file contains instructions to build an image

image is made of layers

docker images are avaiable from dockerhub repository ( Official images)

app lives in image file system not in host system.

>docker version

FROM openjdk:11
RUN mkdir /app
## used with images
## we can have multiple runs
# Use following within host OS
COPY out/production/HelloWorldDocker/   /app
WORKDIR /app
CMD java Main

#############

1. Pull open jdk image
2. Copy app file into image
3. Run app when the container starts

#############

>docker build -t helloworld:1.0
>docker images
>docker run helloworld:1.0 (run the container)
>docker ps (lists all running containers)
>docker ps -a (lists all running containers + stop)
while(true){
    Thread.sleep(2*1000);
    S.o.p(+count++);
}
###################
Build new image
>docker build helloworld:2.0
>docker run -d helloworld:2.0 ##-d delete mode
>docker ps
>docker logs containerid

Part 2
1. DB containr(containing db)
2. container for app with dependencies

>docker pull mysql
(or)
>docker pull mysql:80

>docker run --name app-db -d -e MYSQL-ROOT-PASSWORD=password -e MYSQL_DATABASE =myDB mysql

>doker ps
>docker logs app-db

2. Containering app

FROM tomcat:10-jdk17
ADD target/MyWebApp.war /usr/local/tomcat/webapps/MyWebApp.war
EXPOSE 8080
CMD ["catalina.sh", "run"]

Expose a port (8080) allows the container to communicate with outside app.

docker rm -f (force stop) 

//document --help

docker run --name app -d -p 8080:8080

where - p - publish (8080:8080 - Host port is bounded to container port)

docker run --d -p 8081:8080
>rm -f tomc7

>docker ps
>docker bridge network
>docker network create app-network

n/w is created with 3 additional nws by default.

host - host, brdige-bridge, home-null, app-network-bridge (recommended)

>construct connect app-network ap-db

chnage to javax.persistence.jdbc.url

value = "jdbc:mysql://app-db/mydb"

(from localhost:3306)

-rebuild app,image
-redeploy

docker compose - deploy our app services

create a yml file(it is a configuration file which is made of key & value pairs)

docker compose automatically bridge nw

>docker rm -f app>docker rm app-db
>docker rs
>docker compose up -db
 
it will create 2 containers

-----
Google docker engine
https://docs.docker.com/engine/install/
Use admin account to install
docker desktop needs to be started manually
>doker --version

Launch MySQL using Docker
docker run --detach 
--env MYSQL_ROOT_PASSWORD=dummypassword 
--env MYSQL_USER=todos-user 
--env MYSQL_PASSWORD=dummytodos 
--env MYSQL_DATABASE=todos 
--name mysql 
--publish 3306:3306 
mysql:8-oracle

where mysql is a conainter

application.properties 
#spring.datasource.url=jdbc:h2:mem:testdb
 
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://localhost:3306/todos
spring.datasource.username=todos-user
spring.datasource.password=dummytodos
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
 
#todos-user@localhost:3306


mysqlsh commands

mysqlsh
\connect todos-user@localhost:3306
\sql
use todos
select * from todo;
\quit

-----------------------------
https://dev.mysql.com/doc/mysql-shell/8.0/en/mysqlsh.html
----------






