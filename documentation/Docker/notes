Hardware - OS - JVM - App - Helloworld.java

App + App server - MyApp.war - App

JVM - OS - Window

Dev team, Testing team, DEploy them on CI/CD

Using docker, we can containerize our app & its dependencies ( App + App server + JVM)

DB can be dockerized separetly

HW - Host OS - Guest OS - App
HW - Host OS - Docker - App

1. Install a docker
2. Build a docker image [In order to create a docket image we need docker file]
3. Run docker container(running instance of a image) from a docker image

Note docker file contains instructions to build an image

image is made of layers

docker images are avaiable from dockerhub repository ( Official images)

app lives in image file system not in host system.

>docker version

FROM openjdk:11
RUN mkdir /app
## used with images
## we can have multiple runs
# Use following within host OS
COPY out/production/HelloWorldDocker/   /app
WORKDIR /app
CMD java Main

#############

1. Pull open jdk image
2. Copy app file into image
3. Run app when the container starts

#############

>docker build -t helloworld:1.0
>docker images
>docker run helloworld:1.0 (run the container)
>docker ps (lists all running containers)
>docker ps -a (lists all running containers + stop)
while(true){
    Thread.sleep(2*1000);
    S.o.p(+count++);
}
###################
Build new image
>docker build helloworld:2.0
>docker run -d helloworld:2.0 ##-d delete mode
>docker ps
>docker logs containerid

Part 2
1. DB containr(containing db)
2. container for app with dependencies

>docker pull mysql
(or)
>docker pull mysql:80

>docker run --name app-db -d -e MYSQL-ROOT-PASSWORD=password -e MYSQL_DATABASE =myDB mysql

>doker ps
>docker logs app-db

2. Containering app

FROM tomcat:10-jdk17
ADD target/MyWebApp.war /usr/local/tomcat/webapps/MyWebApp.war
EXPOSE 8080
CMD ["catalina.sh", "run"]

Expose a port (8080) allows the container to communicate with outside app.

docker rm -f (force stop) 

//document --help

docker run --name app -d -p 8080:8080

where - p - publish (8080:8080 - Host port is bounded to container port)

docker run --d -p 8081:8080
>rm -f tomc7

>docker ps
>docker bridge network
>docker network create app-network

n/w is created with 3 additional nws by default.

host - host, brdige-bridge, home-null, app-network-bridge (recommended)

>construct connect app-network ap-db

chnage to javax.persistence.jdbc.url

value = "jdbc:mysql://app-db/mydb"

(from localhost:3306)

-rebuild app,image
-redeploy

docker compose - deploy our app services

create a yml file(it is a configuration file which is made of key & value pairs)

docker compose automatically bridge nw

>docker rm -f app>docker rm app-db
>docker rs
>docker compose up -db
 
it will create 2 containers

-----NEW--------
Google docker engine
https://docs.docker.com/engine/install/
Use admin account to install
docker desktop needs to be started manually.It is used to run containers
>= Windos 10
>doker --version

Launch MySQL using Docker
docker run --detach 
--env MYSQL_ROOT_PASSWORD=dummypassword 
--env MYSQL_USER=todos-user 
--env MYSQL_PASSWORD=dummytodos 
--env MYSQL_DATABASE=todos 
--name mysql 
--publish 3306:3306 
mysql:8-oracle

where mysql is a conainter, mysql:8-oracle - image name

application.properties 
#spring.datasource.url=jdbc:h2:mem:testdb
 
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://localhost:3306/todos
spring.datasource.username=todos-user
spring.datasource.password=dummytodos
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
 
#todos-user@localhost:3306


mysqlsh commands

mysqlsh
\connect todos-user@localhost:3306
\sql
use todos
select * from todo;
\quit

-----------------------------
https://dev.mysql.com/doc/mysql-shell/8.0/en/mysqlsh.html
----------
docker container run -d -p 5000:5000 example/hello-world-nodejs:0.0.1.RELEASE

where 

example/hello-world-nodejs - repositor name
0.0.1.RELEASE - tag name
example/hello-world-nodejs:0.0.1.RELEASE - image name

docker container run -d -p 5000:5000 example/hello-world-java:0.0.1.RELEASE
docker container run -d -p 5000:5000 example/hello-world-python:0.0.1.RELEASE
docker container ls 
docker image ls
docker container stop cc (sometime ctrl c is not working)
docker container run -d -p 5001:5000 example/hello-world-nodejs:0.0.1.RELEASE
docker container run -d -p 5002:5000 example/hello-world-nodejs:0.0.1.RELEASE
docker container run -p 5003:5000 example/hello-world-nodejs:0.0.1.RELEASE
docker container run -p 5003:5000 example/hello-world-nodejs:0.0.1.RELEASE

where
5001 - host port
 
docker --version
docker container ls
docker build -t example/hello-world-docker:v1 .
docker image list
docker run -d -p 5000:5000 example/hello-world-docker:v1
docker build -t example/hello-world-docker:v2 .
docker container run -d -p 5000:5000 example/hello-world-docker:v2
docker build -t example/hello-world-docker:v3 .
docker container run -d -p 5000:5000 example/hello-world-docker:v3
docker build -t example/hello-world-docker:v4 

-----------------------

How does Traditional Deployment work?

Deployment process described in a document

Operations team follows steps to:

Setup Hardware

Setup OS (Linux, Windows, Mac....)

Install Software(Kava, Phython, NodeJS,..)

Setup Application Dependencies

Install Application

Manual approach:

Takes a lot of time

High chance of making mistakes

------------

Understanding Deployment Process with Docker

OS doesn't matter

Programming Language does not matter 

Hardware does not matter

01: Developer creates a Docker Image

02: Operations run the Docker Image 

Using a very simple command

Takeaway: Once you have a Docker Image, irrespective of what the docker image contains, you run it the same way!

--------------
What's happening in the Background?

docker container run -p 5000:5000 example/hello-world-nodejs:0.0.1.RELEASE

• Docker image is downloaded from Docker Registry (Default: Docker Hub)

https://hub.docker.com/r/example/hello-world-nodejs

Image is a set of bytes

Container: Running Image

example/hello-world-nodejs: Repository Name

☐ 0.0.1.RELEASE: Tag (or version)

■ -p hostPort:containerPort: Maps internal docker port (container port) to a port on the host

(host port)

By default, Docker uses its own internal network called bridge network

We are mapping a host port so that users can access your application

-d: Detatched Mode (Don't tie up the terminal)

-------
Understanding Docker Terminology

• Docker Image: A package representing specific version of your application (or software)

Contains everything your app needs OS, software, code, dependències

• Docker Registry: A place to store your docker images

Docker Hub: A registry to host Docker images

• Docker Repository: Docker images for a specific app (tags are used to differentiate different images)

• Docker Container: Runtime instance of a docker image

• Dockerfile: File with instructions to create a Docker image

---------
Dockerfile - 1 - Creating Docker Images

Go to the folde where dockerfile presents

>docker --version
>docker container ls
>docker build -t example/hello-world-docker:v1 .
>docker image list
>docker run -d -d -p 5000:5000 example/hello-world-docker:v1
>docker container ls
localhost:5000

----------------

Dockerfile - 2 - Build Jar File - Multi Stage

FROM maven:3.8.6-openjdk-18-slim AS build
WORKDIR /home/app
COPY . /home/app
RUN mvn -f /home/app/pom.xml clean package

FROM openjdk:18.0-slim
EXPOSE 5000
COPY --from=build /home/app/target/*.jar app.jar
ENTRYPOINT [ "sh", "-c", "java -jar /app.jar" ]

Copy the above contents

>docker container ls
>docker container stop cc
>docker build -t example/hello-world-docker:v2 .
>clear
>docker image list
>docker run -d -d -p 5000:5000 example/hello-world-docker:v2
>docker container ls
localhost:5000



----------------

Dockerfile - 3 - Caching

FROM maven:3.8.6-openjdk-18-slim AS build
WORKDIR /home/app

COPY ./pom.xml /home/app/pom.xml
COPY ./src/main/java/com/example/rest/webservices/restfulwebservices/RestfulWebServicesApplication.java	/home/app/src/main/java/com/example/rest/webservices/restfulwebservices/RestfulWebServicesApplication.java

RUN mvn -f /home/app/pom.xml clean package

COPY . /home/app
RUN mvn -f /home/app/pom.xml clean package

FROM openjdk:18.0-slim
EXPOSE 5000
COPY --from=build /home/app/target/*.jar app.jar
ENTRYPOINT [ "sh", "-c", "java -jar /app.jar" ]


>docker container ls
>docker container stop cc
>docker build -t example/hello-world-docker:v3 .
>clear
>docker image list
>docker run -d -d -p 5000:5000 example/hello-world-docker:v3
>docker container ls
localhost:5000

makes changes

>docker build -t example/hello-world-docker:v4 .


---------------------

Spring Boot Maven Plugin - Create Docker Image

• Spring Boot Maven Plugin: Provides Spring Boot

support in Apache Maven

Example: Create executable jar package

Example: Run Spring Boot application

Example: Create a Container Image

■ Commands:

mvn spring-boot:repackage (create jar or war)

Run package using java -jar

mvn spring-boot:run (Run application)

mvn spring-boot:start (Non-blocking. Use it to run integration tests.) mvn spring-boot:stop (Stop application started with start command)

mvn spring-boot:build-image (Build a container image)

If use this plugin, we dont need Dockerfile

In run as give goal as 

pring-boot:build-image

maven buils oci compatible container images using build packs


>docker image list
>docker container run -d -p 5000:5000 hello-world-java:0.0.1-SNAPSHOT





