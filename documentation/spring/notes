@SpringBootApplication
public class DemoApplication {

	public static void main(String[] args) {
		ConfigurableApplicationContext context =  SpringApplication.run(DemoApplication.class, args);
		Alien a = context.getBean(Alien.class);
		a.show();

	}

}

@Component
public class Alien {

	private int aid;
	private String aname;
	private String tech;
	@Autowired
	@Qualifier("lap1")
	private Laptop laptop;
	
	
	
	import org.springframework.stereotype.Component;

@Component("lap1")
public class Laptop
{

by default autowired search by type 
@Qualifier - Search by name
@Componet - instanties object in spring container
@component
@Scope(value="prototype") - no specify it is singelton by default

    ---------------


    circuit braker


    https://jsonplaceholder.typicode.com/albums

    https://www.concretepage.com/spring-5/spring-resttemplate-exchange

    https://jsession4d.com/a-quick-guide-to-resilience4j-with-spring-boot/

    https://goonlinetools.com/yaml-formatter/

    https://reflectoring.io/circuitbreaker-with-resilience4j/

    https://jsession4d.com/database/

    https://jsession4d.com/a-quick-guide-to-resilience4j-with-spring-boot/


	Bean creation 3 ways

	1. xml
	2. Component-autowired
	3. configuration-bean

	Define only spring-webmvc dependency in pom.xml
	it will automatically download - spring-web,vc,
spring-aop,
spring-beans,
spring-context,
spring-core,
spring-jcl
spring-expression,
spring-web


---------

Method 1 - xml

//web.xml
public class WordCountWebConfig implements WebApplicationInitializer {
@override
public void onStartup(ServletContext servlietContext) throws ServletException {
XmlWebApplicationContext webc = new XmlWebApplicationContext();
webc.setConfiglocation( “classpath:appconfig.xml");
//create DS
DispatcherServlet ds = new DispatcherServiet(webAl);
//register DS
ServletRegistration.Dynamic servlet = servlietContext.addServlet("MyDs", ds);
servlet.setLoadOnStartup(1);
servlet.addMapping(”/wordcount.com/*");

Method 2: - annotation based

//web.xml
public class WordCountWebConfig implements WebApplicationInitializer {
@override
public void onStartup(ServletContext servlietContext) throws ServletException {
AnnotationConfigWebApplicationContext webc = new AnnotationConfigWebApplicationContext();
webc.register(SpringAppllicationConfig.class);
//webc.setConfiglocation( “classpath:appconfig.xml");
//create DS
DispatcherServlet ds = new DispatcherServiet(webc);
//register DS
ServletRegistration.Dynamic servlet = servlietContext.addServlet("MyDs", ds);
servlet.setLoadOnStartup(1);
servlet.addMapping(”/wordcount.com/*");

//replacement of appconfig.xml

package com.progrank.config;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = "com.progrank.controller’
public class SpringAppllicationConfig {
	@Bean
	public InternalResourceViewResolver viewResolver() {
	{
	InternalResourceViewResolver vw = new InternalResourceViewResolver();
	vw. setPrefix("/WEB-INF/jsp/");;
	vw. setSuffix(".jsp");;|
	return vw;
	}
}


Method 3: - less lines - java configuration

public class WebXmlAppConfig extends AbstractAnnotationConfigDispatcherServletInitializer {

@override

protected Class<?>[] getRootConfigClasses() {
// TODO Auto-generated method stub
return null;

}

@override
protected Class<?>[] getServletConfigClasses() {
{
// TODO Auto-generated method stub

Class classArr[] = {SpringAppllicationConfig.class} ;
return classArr;

}

@override

protected String[] getServletMappings() {
// TODO Auto-generated method stub T
String arrMapping[] ={"/"};
return arrMapping;
}


------------
