// Generated by https://quicktype.io

// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
function toTweet(json) {
    return cast(JSON.parse(json), r("Tweet"));
}

function tweetToJson(value) {
    return JSON.stringify(uncast(value, r("Tweet")), null, 2);
}

function invalidValue(typ, val) {
    throw Error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`);
}

function jsonToJSProps(typ) {
    if (typ.jsonToJS === undefined) {
        var map = {};
        typ.props.forEach((p) => map[p.json] = { key: p.js, typ: p.typ });
        typ.jsonToJS = map;
    }
    return typ.jsonToJS;
}

function jsToJSONProps(typ) {
    if (typ.jsToJSON === undefined) {
        var map = {};
        typ.props.forEach((p) => map[p.js] = { key: p.json, typ: p.typ });
        typ.jsToJSON = map;
    }
    return typ.jsToJSON;
}

function transform(val, typ, getProps) {
    function transformPrimitive(typ, val) {
        if (typeof typ === typeof val) return val;
        return invalidValue(typ, val);
    }

    function transformUnion(typs, val) {
        // val must validate against one typ in typs
        var l = typs.length;
        for (var i = 0; i < l; i++) {
            var typ = typs[i];
            try {
                return transform(val, typ, getProps);
            } catch (_) {}
        }
        return invalidValue(typs, val);
    }

    function transformEnum(cases, val) {
        if (cases.indexOf(val) !== -1) return val;
        return invalidValue(cases, val);
    }

    function transformArray(typ, val) {
        // val must be an array with no invalid elements
        if (!Array.isArray(val)) return invalidValue("array", val);
        return val.map(el => transform(el, typ, getProps));
    }

    function transformObject(props, additional, val) {
        if (val === null || typeof val !== "object" || Array.isArray(val)) {
            return invalidValue("object", val);
        }
        var result = {};
        Object.getOwnPropertyNames(props).forEach(key => {
            const prop = props[key];
            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;
            result[prop.key] = transform(v, prop.typ, getProps);
        });
        Object.getOwnPropertyNames(val).forEach(key => {
            if (!Object.prototype.hasOwnProperty.call(props, key)) {
                result[key] = transform(val[key], additional, getProps);
            }
        });
        return result;
    }

    if (typ === "any") return val;
    if (typ === null) {
        if (val === null) return val;
        return invalidValue(typ, val);
    }
    if (typ === false) return invalidValue(typ, val);
    while (typeof typ === "object" && typ.ref !== undefined) {
        typ = typeMap[typ.ref];
    }
    if (Array.isArray(typ)) return transformEnum(typ, val);
    if (typeof typ === "object") {
        return typ.hasOwnProperty("unionMembers") ? transformUnion(typ.unionMembers, val)
            : typ.hasOwnProperty("arrayItems")    ? transformArray(typ.arrayItems, val)
            : typ.hasOwnProperty("props")         ? transformObject(getProps(typ), typ.additional, val)
            : invalidValue(typ, val);
    }
    return transformPrimitive(typ, val);
}

function cast(val, typ) {
    return transform(val, typ, jsonToJSProps);
}

function uncast(val, typ) {
    return transform(val, typ, jsToJSONProps);
}

function a(typ) {
    return { arrayItems: typ };
}

function u(...typs) {
    return { unionMembers: typs };
}

function o(props, additional) {
    return { props, additional };
}

function m(additional) {
    return { props: [], additional };
}

function r(name) {
    return { ref: name };
}

const typeMap = {
    "Tweet": o([
        { json: "created_at", js: "created_at", typ: "" },
        { json: "id", js: "id", typ: 0 },
        { json: "id_str", js: "id_str", typ: "" },
        { json: "text", js: "text", typ: "" },
        { json: "truncated", js: "truncated", typ: true },
        { json: "entities", js: "entities", typ: r("TweetEntities") },
        { json: "source", js: "source", typ: "" },
        { json: "in_reply_to_status_id", js: "in_reply_to_status_id", typ: null },
        { json: "in_reply_to_status_id_str", js: "in_reply_to_status_id_str", typ: null },
        { json: "in_reply_to_user_id", js: "in_reply_to_user_id", typ: null },
        { json: "in_reply_to_user_id_str", js: "in_reply_to_user_id_str", typ: null },
        { json: "in_reply_to_screen_name", js: "in_reply_to_screen_name", typ: null },
        { json: "user", js: "user", typ: r("User") },
        { json: "geo", js: "geo", typ: null },
        { json: "coordinates", js: "coordinates", typ: null },
        { json: "place", js: "place", typ: null },
        { json: "contributors", js: "contributors", typ: null },
        { json: "is_quote_status", js: "is_quote_status", typ: true },
        { json: "retweet_count", js: "retweet_count", typ: 0 },
        { json: "favorite_count", js: "favorite_count", typ: 0 },
        { json: "favorited", js: "favorited", typ: true },
        { json: "retweeted", js: "retweeted", typ: true },
        { json: "possibly_sensitive", js: "possibly_sensitive", typ: true },
        { json: "possibly_sensitive_appealable", js: "possibly_sensitive_appealable", typ: true },
        { json: "lang", js: "lang", typ: "" },
    ], false),
    "TweetEntities": o([
        { json: "hashtags", js: "hashtags", typ: a("any") },
        { json: "symbols", js: "symbols", typ: a("any") },
        { json: "user_mentions", js: "user_mentions", typ: a("any") },
        { json: "urls", js: "urls", typ: a(r("URL")) },
    ], false),
    "URL": o([
        { json: "url", js: "url", typ: "" },
        { json: "expanded_url", js: "expanded_url", typ: "" },
        { json: "display_url", js: "display_url", typ: "" },
        { json: "indices", js: "indices", typ: a(0) },
    ], false),
    "User": o([
        { json: "id", js: "id", typ: 0 },
        { json: "id_str", js: "id_str", typ: "" },
        { json: "name", js: "name", typ: "" },
        { json: "screen_name", js: "screen_name", typ: "" },
        { json: "location", js: "location", typ: "" },
        { json: "description", js: "description", typ: "" },
        { json: "url", js: "url", typ: "" },
        { json: "entities", js: "entities", typ: r("UserEntities") },
        { json: "protected", js: "protected", typ: true },
        { json: "followers_count", js: "followers_count", typ: 0 },
        { json: "friends_count", js: "friends_count", typ: 0 },
        { json: "listed_count", js: "listed_count", typ: 0 },
        { json: "created_at", js: "created_at", typ: "" },
        { json: "favourites_count", js: "favourites_count", typ: 0 },
        { json: "utc_offset", js: "utc_offset", typ: null },
        { json: "time_zone", js: "time_zone", typ: null },
        { json: "geo_enabled", js: "geo_enabled", typ: null },
        { json: "verified", js: "verified", typ: true },
        { json: "statuses_count", js: "statuses_count", typ: 0 },
        { json: "lang", js: "lang", typ: "" },
        { json: "contributors_enabled", js: "contributors_enabled", typ: null },
        { json: "is_translator", js: "is_translator", typ: null },
        { json: "is_translation_enabled", js: "is_translation_enabled", typ: null },
        { json: "profile_background_color", js: "profile_background_color", typ: "" },
        { json: "profile_background_image_url", js: "profile_background_image_url", typ: "" },
        { json: "profile_background_image_url_https", js: "profile_background_image_url_https", typ: "" },
        { json: "profile_background_tile", js: "profile_background_tile", typ: null },
        { json: "profile_image_url", js: "profile_image_url", typ: "" },
        { json: "profile_image_url_https", js: "profile_image_url_https", typ: "" },
        { json: "profile_banner_url", js: "profile_banner_url", typ: "" },
        { json: "profile_link_color", js: "profile_link_color", typ: "" },
        { json: "profile_sidebar_border_color", js: "profile_sidebar_border_color", typ: "" },
        { json: "profile_sidebar_fill_color", js: "profile_sidebar_fill_color", typ: "" },
        { json: "profile_text_color", js: "profile_text_color", typ: "" },
        { json: "profile_use_background_image", js: "profile_use_background_image", typ: null },
        { json: "has_extended_profile", js: "has_extended_profile", typ: null },
        { json: "default_profile", js: "default_profile", typ: true },
        { json: "default_profile_image", js: "default_profile_image", typ: true },
        { json: "following", js: "following", typ: null },
        { json: "follow_request_sent", js: "follow_request_sent", typ: null },
        { json: "notifications", js: "notifications", typ: null },
        { json: "translator_type", js: "translator_type", typ: "" },
    ], false),
    "UserEntities": o([
        { json: "url", js: "url", typ: r("Description") },
        { json: "description", js: "description", typ: r("Description") },
    ], false),
    "Description": o([
        { json: "urls", js: "urls", typ: a(r("URL")) },
    ], false),
};

module.exports = {
    "tweetToJson": tweetToJson,
    "toTweet": toTweet,
};
